@page "/"
@inject IJSRuntime JSRuntime

<!-- Session Selection -->
<div>
    <label for="sessionSelect">Select Session:</label>
    <select value="@selectedSession" @onchange="e => OnSessionChanged(e.Value?.ToString())">
        @foreach (var session in sessions)
        {
            <option value="@session">@session</option>
        }
    </select>
</div>

<!-- Scramble Display -->
<div class="scramble-display">
    <p>@CurrentScramble</p>
</div>

<!-- Timer Display -->
<div class="timer-display">@ElapsedTime</div>

<div class="averages">
    <div>Ao5: @Ao5Display</div>
    <div>Ao12: @Ao12Display</div>
</div>

<!-- Recorded Times Panel -->
<div class="times-panel">
    <h2>Recorded Times</h2>
    @if (recordedTimes.Count == 0)
    {
        <p>No times recorded yet for this session.</p>
    }
    else
    {
        <ul>
            @foreach (var record in Enumerable.Reverse(recordedTimes))
            {
                <li>
                    <strong>Scramble:</strong> @record.Scramble <br />
                    <strong>Time:</strong> @record.Time
                    <button @onclick="() => DeleteTime(record)">Delete</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    private bool _isRunning = false;
    private DateTime _startTime;
    private TimeSpan _elapsed = TimeSpan.Zero;
    private List<Record> recordedTimes = new();
    private List<string> sessions = new();
    private string selectedSession = "Default";
    private string Ao5Display = "N/A";
    private string Ao12Display = "N/A";
    private string CurrentScramble = GenerateScramble();

    private string ElapsedTime
    {
        get
        {
            if (_elapsed.TotalHours >= 1)
                return _elapsed.ToString(@"hh\:mm\:ss\.fff");
            else if (_elapsed.TotalMinutes >= 1)
                return _elapsed.ToString(@"mm\:ss\.fff");
            else
                return _elapsed.ToString(@"ss\.fff");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LoadSessions();
        selectedSession = sessions.FirstOrDefault() ?? "Default";
        LoadSessionData();
        await JSRuntime.InvokeVoidAsync("initializeKeyListener", DotNetObjectReference.Create(this));
    }

    private static string GenerateScramble()
    {
        var moves = new[] { "R", "L", "U", "D", "F", "B" };
        var modifiers = new[] { "", "'", "2" };
        var scramble = new List<string>();
        var previousMove = "";

        for (int i = 0; i < 20; i++)
        {
            string move;
            do
            {
                move = moves[Random.Shared.Next(moves.Length)];
            } while (move == previousMove);

            previousMove = move;
            scramble.Add(move + modifiers[Random.Shared.Next(modifiers.Length)]);
        }

        return string.Join(" ", scramble);
    }

    private void StartTimer()
    {
        if (!_isRunning)
        {
            _elapsed = TimeSpan.Zero;
            _isRunning = true;
            _startTime = DateTime.Now;
            _ = UpdateTimerAsync();
        }
    }

    private void StopTimer()
    {
        if (_isRunning)
        {
            _isRunning = false;
            RecordTime(CurrentScramble, ElapsedTime);
            CurrentScramble = GenerateScramble();
        }
        StateHasChanged();
    }

    private async Task UpdateTimerAsync()
    {
        while (_isRunning)
        {
            _elapsed = DateTime.Now - _startTime;
            StateHasChanged();
            await Task.Delay(50);
        }
    }

    private void RecordTime(string scramble, string time)
    {
        recordedTimes.Add(new Record { Scramble = scramble, Time = time });
        SaveSessionData();
        UpdateAverages();
    }

    private void DeleteTime(Record record)
    {
        recordedTimes.Remove(record);
        SaveSessionData();
        UpdateAverages();
    }

    private void UpdateAverages()
    {
        if (recordedTimes.Count >= 5)
        {
            var lastFive = recordedTimes.Skip(Math.Max(0, recordedTimes.Count - 5)).ToList();
            Ao5Display = CalculateWCAAverageAO5(lastFive);
        }
        else
        {
            Ao5Display = "N/A";
        }

        if (recordedTimes.Count >= 12)
        {
            var lastTwelve = recordedTimes.Skip(Math.Max(0, recordedTimes.Count - 12)).ToList();
            Ao12Display = CalculateWCAAverageAO12(lastTwelve);
        }
        else
        {
            Ao12Display = "N/A";
        }
    }

    private string CalculateWCAAverageAO5(List<Record> times)
    {
        var timeValues = times.Select(t => double.Parse(t.Time)).OrderBy(t => t).ToList();
        timeValues.RemoveAt(0); // Remove fastest
        timeValues.RemoveAt(timeValues.Count - 1); // Remove slowest
        return timeValues.Average().ToString("F3");
    }

    private string CalculateWCAAverageAO12(List<Record> times)
    {
        var timeValues = times.Select(t => double.Parse(t.Time)).OrderBy(t => t).ToList();
        timeValues.RemoveAt(0); // Remove fastest
        timeValues.RemoveAt(timeValues.Count - 1); // Remove slowest
        return timeValues.Average().ToString("F3");
    }

    private void LoadSessions()
    {
        var json = Preferences.Get("sessions", string.Empty);
        sessions = string.IsNullOrEmpty(json) ? new List<string> { "Default" } :
                   System.Text.Json.JsonSerializer.Deserialize<List<string>>(json) ?? new List<string> { "Default" };
    }

    private void SaveSessions()
    {
        Preferences.Set("sessions", System.Text.Json.JsonSerializer.Serialize(sessions));
    }

    private void LoadSessionData()
    {
        var json = Preferences.Get(selectedSession, string.Empty);
        recordedTimes = string.IsNullOrEmpty(json)
            ? new List<Record>()
            : System.Text.Json.JsonSerializer.Deserialize<List<Record>>(json) ?? new List<Record>();
        UpdateAverages();
    }

    private void SaveSessionData()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(recordedTimes);
        Preferences.Set(selectedSession, json);
    }

    private async void OnSessionChanged(string? newValue)
    {
        selectedSession = newValue ?? "Default";
        LoadSessionData();
        await JSRuntime.InvokeVoidAsync("blurElement"); // Remove focus from the dropdown
        StateHasChanged();
    }

    [JSInvokable]
    public void OnSpacePressed()
    {
        if (_isRunning) StopTimer();
        else StartTimer();
    }

    public class Record
    {
        public string Scramble { get; set; } = string.Empty;
        public string Time { get; set; } = string.Empty;
    }
}
