@page "/times"
@inject IJSRuntime JSRuntime

<h1>Sessions</h1>

<!-- Create and Delete Buttons -->
<div>
    <input @bind="newSessionName" placeholder="New Session Name" />
    <button @onclick="CreateNewSession">Create</button>
    @if (selectedSession != "Default")
    {
        <button class="delete-button" @onclick="ConfirmDeleteCurrentSession">Delete Current Session</button>
    }
</div>

<!-- Select Session -->
<div>
    <label>Select Session:</label>
    <select value="@selectedSession" @onchange="e => OnSessionChanged(e.Value?.ToString())">
        @foreach (var session in sessions)
        {
            <option value="@session">@session</option>
        }
    </select>
</div>

<!-- Recorded Times Panel -->
<div class="times-panel">
    <h2>Recorded Times</h2>
    @if (recordedTimes.Count == 0)
    {
        <p>No times recorded for this session.</p>
    }
    else
    {
        <ul>
            @foreach (var record in Enumerable.Reverse(recordedTimes))
            {
                <li>
                    <strong>Scramble:</strong> @record.Scramble <br />
                    <strong>Time:</strong> @record.Time
                    <button @onclick="() => DeleteTime(record)">Delete</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    private List<Record> recordedTimes = new();
    private List<string> sessions = new();
    private string selectedSession = "Default";
    private string newSessionName = "";

    protected override void OnInitialized()
    {
        LoadSessions();
        selectedSession = sessions.FirstOrDefault() ?? "Default";
        LoadSessionData();
    }

    private async void OnSessionChanged(string? newValue)
    {
        selectedSession = newValue ?? "Default";
        LoadSessionData();
        await JSRuntime.InvokeVoidAsync("blurElement"); // Remove focus from the dropdown
        StateHasChanged();
    }

    private void LoadSessions()
    {
        var json = Preferences.Get("sessions", string.Empty);
        sessions = string.IsNullOrEmpty(json) ? new List<string> { "Default" } :
                   System.Text.Json.JsonSerializer.Deserialize<List<string>>(json) ?? new List<string> { "Default" };
    }

    private void SaveSessions()
    {
        Preferences.Set("sessions", System.Text.Json.JsonSerializer.Serialize(sessions));
    }

    private void LoadSessionData()
    {
        var json = Preferences.Get(selectedSession, string.Empty);
        recordedTimes = string.IsNullOrEmpty(json)
            ? new List<Record>()
            : System.Text.Json.JsonSerializer.Deserialize<List<Record>>(json) ?? new List<Record>();
    }

    private void CreateNewSession()
    {
        if (!string.IsNullOrWhiteSpace(newSessionName) && !sessions.Contains(newSessionName))
        {
            sessions.Add(newSessionName);
            SaveSessions();
            selectedSession = newSessionName;
            recordedTimes.Clear();
            SaveSessionData();
        }
    }

    private async void ConfirmDeleteCurrentSession()
    {
        // Ask for confirmation
        var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the session '{selectedSession}'? All associated times will be permanently deleted.");
        
        if (isConfirmed)
        {
            DeleteCurrentSession();
            StateHasChanged(); // Update the page immediately after deletion
        }
    }

    private void DeleteCurrentSession()
    {
        if (selectedSession != "Default" && sessions.Contains(selectedSession))
        {
            sessions.Remove(selectedSession);
            Preferences.Remove(selectedSession); // Remove the session's recorded times
            SaveSessions();

            // Switch to "Default" session after deletion
            selectedSession = "Default";
            LoadSessionData();
        }
    }

    private void DeleteTime(Record record)
    {
        recordedTimes.Remove(record);
        SaveSessionData();
        StateHasChanged(); // Refresh the UI after deleting a time
    }

    private void SaveSessionData()
    {
        Preferences.Set(selectedSession, System.Text.Json.JsonSerializer.Serialize(recordedTimes));
    }

    public class Record
    {
        public string Scramble { get; set; } = string.Empty;
        public string Time { get; set; } = string.Empty;
    }
}
